.PHONY: help test test-python test-scala build-ci run-ci clean-ci deploy-local check-health

# Ajuda - mostra todos os comandos dispon√≠veis
help:
	@echo "üöÄ Brain Agriculture - Comandos Dispon√≠veis"
	@echo "=========================================="
	@echo ""
	@echo "üìã TESTES:"
	@echo "  test                    - Executar todos os testes (Python + Scala)"
	@echo "  test-python             - Executar apenas testes Python (com mock)"
	@echo "  test-python-real        - Testes Python com dados reais (PostgreSQL)"
	@echo "  test-python-coverage    - Testes Python com relat√≥rio de cobertura"
	@echo "  test-complete-coverage  - Cobertura completa de TODAS as rotas"
	@echo "  test-real-crud          - Testes CRUD reais (CREATE‚ÜíUPDATE‚ÜíDELETE)"
	@echo "  test-crud-producer      - Teste CRUD espec√≠fico de produtores"
	@echo "  test-crud-system        - Teste de fluxo completo do sistema"
	@echo "  test-scala              - Executar apenas testes Scala"
	@echo "  test-global             - Executar sistema de testes global"
	@echo ""
	@echo "üê≥ CI/CD e DOCKER:"
	@echo "  build-ci          - Build imagens para CI/CD"
	@echo "  run-ci            - Executar pipeline completo de CI"
	@echo "  clean-ci          - Limpar containers e volumes de CI"
	@echo ""
	@echo "üåê DESENVOLVIMENTO:"
	@echo "  dev               - Executar APIs em modo desenvolvimento"
	@echo "  build             - Build das APIs de produ√ß√£o"
	@echo "  deploy-local      - Deploy local completo"
	@echo ""
	@echo "üîç HEALTH CHECKS:"
	@echo "  check-health      - Verificar sa√∫de das APIs"
	@echo "  logs-python       - Ver logs da API Python"
	@echo "  logs-scala        - Ver logs da API Scala"

# Executar todos os testes
test:
	@echo "üß™ Executando todos os testes..."
	@$(MAKE) test-python
	@$(MAKE) test-scala
	@$(MAKE) test-global

# Executar testes Python
test-python:
	@echo "üêç Executando testes Python..."
	@cd api_python && python test_runner.py

# Executar testes Python com dados reais
test-python-real:
	@echo "üîç Executando testes Python com dados reais do PostgreSQL..."
	@cd api_python && python tests/run_real_tests.py --real-only

# Executar todos os testes Python (mock + real)
test-python-all:
	@echo "üß™ Executando todos os testes Python (mock + real)..."
	@cd api_python && python tests/run_real_tests.py --all

# Executar testes Python com relat√≥rio de cobertura
test-python-coverage:
	@echo "üìä Executando testes Python com cobertura..."
	@cd api_python && pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=html
	@echo "üìà Relat√≥rio HTML dispon√≠vel em: api_python/htmlcov/index.html"

# Executar testes de cobertura completa de TODAS as rotas
test-complete-coverage:
	@echo "üéØ Executando testes de cobertura completa (TODAS as rotas)..."
	@cd api_python && python tests/run_complete_coverage.py --report

# Executar testes de CRUD real (criar, atualizar, deletar registros reais)
test-real-crud:
	@echo "üîÑ Executando testes de CRUD real (CREATE ‚Üí UPDATE ‚Üí DELETE)..."
	@cd api_python && python tests/run_real_crud.py

# Executar teste espec√≠fico de CRUD
test-crud-producer:
	@echo "üë®‚Äçüåæ Testando CRUD de produtores..."
	@cd api_python && python tests/run_real_crud.py --test producer

test-crud-farm:
	@echo "üè° Testando CRUD de fazendas..."
	@cd api_python && python tests/run_real_crud.py --test farm

test-crud-system:
	@echo "üöÄ Testando fluxo completo do sistema..."
	@cd api_python && python tests/run_real_crud.py --test system

# Executar testes Scala
test-scala:
	@echo "‚ö° Executando testes Scala..."
	@cd api_scala && sbt compile
	@cd api_scala && sbt "runMain TestRunner" || echo "Testes Scala podem precisar de SBT instalado"

# Executar sistema de testes global
test-global:
	@echo "üåç Executando sistema de testes global..."
	@python test_runner_global.py

# Build para CI/CD
build-ci:
	@echo "üèóÔ∏è Fazendo build das imagens para CI..."
	@docker-compose -f docker-compose.ci.yml build

# Executar pipeline de CI completo
run-ci:
	@echo "üöÄ Executando pipeline de CI/CD..."
	@docker-compose -f docker-compose.ci.yml up --build --abort-on-container-exit
	@$(MAKE) clean-ci

# Limpar containers e volumes de CI
clean-ci:
	@echo "üßπ Limpando ambiente de CI..."
	@docker-compose -f docker-compose.ci.yml down --volumes --remove-orphans

# Executar em modo desenvolvimento
dev:
	@echo "üîß Iniciando modo desenvolvimento..."
	@docker-compose up --build

# Build das APIs de produ√ß√£o
build:
	@echo "üè≠ Fazendo build de produ√ß√£o..."
	@docker-compose build

# Deploy local completo
deploy-local:
	@echo "üåê Executando deploy local..."
	@docker-compose up -d --build
	@sleep 10
	@$(MAKE) check-health

# Verificar sa√∫de das APIs
check-health:
	@echo "ü©∫ Verificando sa√∫de das APIs..."
	@echo "Python API (porta 8000):"
	@curl -f http://localhost:8000/docs -s > /dev/null && echo "‚úÖ Python API OK" || echo "‚ùå Python API indispon√≠vel"
	@echo "Scala API (porta 8080):"
	@curl -f http://localhost:8080/health -s > /dev/null && echo "‚úÖ Scala API OK" || echo "‚ùå Scala API indispon√≠vel"

# Ver logs da API Python
logs-python:
	@docker-compose logs -f brain-api-python

# Ver logs da API Scala
logs-scala:
	@docker-compose logs -f brain-api-scala

# Comandos para CI (usado pelo GitHub Actions)
ci-python:
	@echo "ü§ñ CI: Testando Python..."
	@cd api_python && python tests/test_validators_isolated.py
	@cd api_python && python test_runner.py

ci-scala:
	@echo "ü§ñ CI: Testando Scala..."
	@cd api_scala && sbt compile
	@cd api_scala && sbt "runMain TestRunner"

ci-integration:
	@echo "ü§ñ CI: Testes de integra√ß√£o..."
	@python test_runner_global.py

# Limpar tudo
clean-all:
	@echo "üßπ Limpando tudo..."
	@docker-compose down --volumes --remove-orphans
	@docker-compose -f docker-compose.ci.yml down --volumes --remove-orphans
	@docker system prune -f
	@cd api_python && find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@cd api_scala && sbt clean || true

# Setup inicial do projeto
setup:
	@echo "‚öôÔ∏è Configurando projeto inicial..."
	@cd api_python && pip install -r requirements.txt
	@echo "Python dependencies installed ‚úÖ"
	@echo "Para Scala, certifique-se de ter SBT instalado"
	@echo "Setup conclu√≠do! Use 'make help' para ver comandos"

# Comandos r√°pidos para desenvolvimento
quick-test:
	@echo "‚ö° Testes r√°pidos..."
	@cd api_python && python tests/test_validators_isolated.py

# Status dos servi√ßos
status:
	@echo "üìä Status dos servi√ßos:"
	@docker-compose ps